#ifndef INPUT_MAN_H
#define INPUT_MAN_H
#include "trie.h"
#include "matrix.h"
#include <ctype.h>

/*
  Checks if the mode given by the user is valid or not
*/
int isvalid_mode(int mode, int k, int maxlen, int maxval);

/*
  Checks what are the lenghts of the words that we should insert into the trie.

  Complexity: linear on the number of bytes in the .puz file
*/
void calculate_needed_lenghts(char * filename, int * lens, FILE * fout);

/*
  Reads a text file and returns a new trie made of its words
  Note: we try to read a dictionary file even if it is not on the format specified. We allow the word separator to be any blankspace, automatically cutoff words not needed and ignore duplicates.

  Complexity: worst case: O(1/4 LKN);
    K is a constante tha depends on to the number of diferent characters in the alphabet (in our case 26, which means 1<K<=26), and the compression factor of the trie generated by the dictionary
    N is the number of characters in the dictionary
    the complexity highly depends on the overlapping of words in the dictionary, and the
*/
trie_node * new_trie_from_dictionary(char * filename, int * lens, FILE * fout);




#endif
